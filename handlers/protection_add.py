from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from utils.db import Database

router = Router()
db = Database()

# –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
managers = [
    "–õ–µ–Ω–∞ –®",
    "–î–º–∏—Ç—Ä–∏–π –ì",
    "–ú–æ—Å–∫–≤–∞",
    "–î–º–∏—Ç—Ä–∏–π –ñ",
    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
]

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class AddProtection(StatesGroup):
    manager = State()
    dealer = State()
    dealer_city = State()
    articles = State()
    quantity = State()
    client_name = State()
    phone_last4 = State()
    object_city = State()
    address = State()
    comment = State()

# –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
def manager_keyboard():
    kb = []
    row = []
    for i, m in enumerate(managers, 1):
        row.append(InlineKeyboardButton(text=m, callback_data=f"mgr_{m}"))
        if i % 2 == 0:
            kb.append(row)
            row = []
    if row:
        kb.append(row)
    return InlineKeyboardMarkup(inline_keyboard=kb)

@router.callback_query(F.data == "add_protection")
async def start_protection(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=manager_keyboard())
    await state.set_state(AddProtection.manager)

@router.callback_query(F.data.startswith("mgr_"))
async def set_manager(call: CallbackQuery, state: FSMContext):
    manager = call.data.replace("mgr_", "")
    await state.update_data(manager=manager)
    await call.message.answer(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–±—Ä–∞–Ω: {manager}\n–í–≤–µ–¥–∏—Ç–µ –¥–∏–ª–µ—Ä–∞:")
    await state.set_state(AddProtection.dealer)

@router.message(AddProtection.dealer)
async def set_dealer(message: Message, state: FSMContext):
    await state.update_data(dealer=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–∞—Ä—Ç–Ω—ë—Ä–∞:")
    await state.set_state(AddProtection.dealer_city)

@router.message(AddProtection.dealer_city)
async def set_city(message: Message, state: FSMContext):
    await state.update_data(dealer_city=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª(—ã):")
    await state.set_state(AddProtection.articles)

@router.message(AddProtection.articles)
async def set_articles(message: Message, state: FSMContext):
    await state.update_data(articles=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç—Ä–∞–∂ –∑–∞—â–∏—Ç—ã (–≤ –º¬≤):")
    await state.set_state(AddProtection.quantity)

@router.message(AddProtection.quantity)
async def set_quantity(message: Message, state: FSMContext):
    try:
        quantity = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∞–∂–∞.")
        return

    data = await state.get_data()
    articles = data["articles"].strip().lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ö–æ–∂–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—â–∏—Ç—ã
    protections = db.fetchall("SELECT * FROM protections WHERE status IN ('active', 'extended')")
    for p in protections:
        db_articles = (p["articles"] or "").strip().lower()
        db_quantity = float(p["quantity"] or 0)
        if db_articles == articles and abs(quantity - db_quantity) / db_quantity <= 0.15:
            similar_msg = (
                "‚ö†Ô∏è –ü–æ—Ö–æ–∂–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:\n"
                f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {p['manager']}\n"
                f"üè¢ –ü–∞—Ä—Ç–Ω—ë—Ä: {p['dealer']}\n"
                f"‚ùóÔ∏è–ê—Ä—Ç–∏–∫—É–ª: {p['articles']}\n"
                f"üìè –ú–µ—Ç—Ä–∞–∂: {p['quantity']} –º¬≤\n"
                f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {p['ends']}\n\n"
                "üí¨ –û–±—Ä–∞—Ç–∏—Å—å –∫ –∫–æ–ª–ª–µ–≥–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—â–∏—Ç—É."
            )
            await message.answer(similar_msg)
            await state.clear()
            return

    await state.update_data(quantity=quantity)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
    await state.set_state(AddProtection.client_name)

@router.message(AddProtection.client_name)
async def set_client_name(message: Message, state: FSMContext):
    await state.update_data(client_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.set_state(AddProtection.phone_last4)

@router.message(AddProtection.phone_last4)
async def set_phone(message: Message, state: FSMContext):
    await state.update_data(phone_last4=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ–±—ä–µ–∫—Ç–∞:")
    await state.set_state(AddProtection.object_city)

@router.message(AddProtection.object_city)
async def set_object_city(message: Message, state: FSMContext):
    await state.update_data(object_city=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞:")
    await state.set_state(AddProtection.address)

@router.message(AddProtection.address)
async def set_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")
    await state.set_state(AddProtection.comment)

@router.message(AddProtection.comment)
async def finalize_protection(message: Message, state: FSMContext):
    data = await state.get_data()
    comment = message.text if message.text != "-" else "‚Äî"
    await state.update_data(comment=comment)
    data = await state.get_data()

    pid = db.add_protection(
        manager=data["manager"],
        dealer=data["dealer"],
        dealer_city=data["dealer_city"],
        articles=data["articles"],
        quantity=data["quantity"],
        client_name=data["client_name"],
        phone_last4=data["phone_last4"],
        object_city=data["object_city"],
        address=data["address"],
        comment=data["comment"],
        created_at=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        ends=(datetime.now() + timedelta(days=5)).strftime("%Y-%m-%d"),
        status="active",
    )

    created_at = datetime.now().strftime("%d.%m.%Y | %H:%M:%S")
    ends = (datetime.now() + timedelta(days=5)).strftime("%d.%m.%Y")

    card = (
        "üëç –ó–∞—â–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞\n\n"
        f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: {data['manager']}\n"
        f"üè¢ –ü–∞—Ä—Ç–Ω—ë—Ä: {data['dealer']}\n"
        f"üìç –ì–æ—Ä–æ–¥ –ü–∞—Ä—Ç–Ω—ë—Ä–∞: {data['dealer_city']}\n\n"
        f"‚ùóÔ∏è–ê—Ä—Ç–∏–∫—É–ª(—ã): {data['articles']}\n"
        f"‚ùóÔ∏è–ú–µ—Ç—Ä–∞–∂ –∑–∞—â–∏—Ç—ã: {data['quantity']} –º¬≤\n\n"
        f"üßç‚Äç‚ôÇÔ∏è –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞/–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {data['client_name']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞: {data['phone_last4']}\n"
        f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {data['object_city']}\n"
        f"üìç –ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞: {data['address']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—â–∏—Ç–µ: {data['comment']}\n\n"
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n"
        f"üìå –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –∑–∞—â–∏—Ç—ã ‚Äî 50 –º¬≤, —Å—Ä–æ–∫ 5 –¥–Ω–µ–π.\n"
        f"‚åõÔ∏è –°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {ends}\n"
        f"üìù –†–∞–∑–º–µ—Å—Ç–∏–ª: {data['manager']}\n"
        f"#ID: {pid}"
    )

    await message.answer(card)
    await state.clear()
