# handlers/admin_panel.py
import asyncio
from pathlib import Path
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# === –í–ê–ñ–ù–û: —ç—Ç–∏ —É—Ç–∏–ª–∏—Ç—ã —É–∂–µ –µ—Å—Ç—å —É —Ç–µ–±—è –≤ –ø—Ä–æ–µ–∫—Ç–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ ===
from database.db import fetchall, fetchone, execute
from utils.export import export_protections_to_xlsx, export_stats_to_xlsx
from utils.filters import IsAdmin

router = Router()

# ---------------- –ú—è–≥–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π ----------------
def _ensure_columns():
    info = fetchall("PRAGMA table_info(protections)")
    names = {r["name"] for r in info}
    if "order_number" not in names:
        try: execute("ALTER TABLE protections ADD COLUMN order_number TEXT")
        except Exception: pass
    if "close_reason" not in names:
        try: execute("ALTER TABLE protections ADD COLUMN close_reason TEXT")
        except Exception: pass
_ensure_columns()
# -------------------------------------------------------------------

# ========================= –ú–ï–ù–Æ –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò =========================
def admin_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ú–µ–Ω–µ–¥–∂–µ—Ä—ã", callback_data="adm_users")],
        [InlineKeyboardButton(text="üè¢ –ü–∞—Ä—Ç–Ω—ë—Ä—ã –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data="adm_dealers")],
        [InlineKeyboardButton(text="üìà –û—Ç—á—ë—Ç –ø–æ –∑–∞—â–∏—Ç–∞–º", callback_data="adm_reports")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", callback_data="adm_stats")],
        [InlineKeyboardButton(text="üì¶ –ê—Ä—Ö–∏–≤", callback_data="adm_archive")],
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä—É", callback_data="adm_find_partner")]
    ])

@router.message(IsAdmin(), F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_kb())


# ========================= –ë–õ–û–ö: –ú–ï–ù–ï–î–ñ–ï–†–´ =========================
class AddMgr(StatesGroup):
    fullname = State()
    tg_id = State()

class DelMgr(StatesGroup):
    tg_id = State()

def managers_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="mgr_add")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="mgr_del")],
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö", callback_data="mgr_list")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]
    ])

@router.callback_query(IsAdmin(), F.data == "adm_users")
async def adm_users(call: CallbackQuery):
    await call.message.edit_text("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏:", reply_markup=managers_menu_kb())

@router.callback_query(IsAdmin(), F.data == "mgr_list")
async def mgr_list(call: CallbackQuery):
    rows = fetchall("SELECT id, full_name, telegram_id, role, created_at FROM users ORDER BY created_at DESC")
    if not rows:
        return await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.", show_alert=True)
    lines = ["üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"]
    for r in rows:
        lines.append(f"‚Ä¢ {r['full_name'] or '-'} | üÜî {r['telegram_id']} | —Ä–æ–ª—å: {r['role']}")
    await call.message.edit_text("\n".join(lines), reply_markup=managers_menu_kb())

@router.callback_query(IsAdmin(), F.data == "mgr_add")
async def mgr_add_start(call: CallbackQuery, state: FSMContext):
    await state.set_state(AddMgr.fullname)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–∫–∞–∫ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ, –Ω–∞–ø—Ä. ¬´–î–º–∏—Ç—Ä–∏–π –ñ¬ª):")

@router.message(IsAdmin(), AddMgr.fullname)
async def mgr_add_get_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        return await message.answer("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
    await state.update_data(fullname=name)
    await state.set_state(AddMgr.tg_id)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—É–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ @userinfobot):")

@router.message(IsAdmin(), AddMgr.tg_id)
async def mgr_add_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data["fullname"]
    try:
        tg_id = int(message.text.strip())
    except ValueError:
        return await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")

    execute("INSERT INTO users (telegram_id, full_name, role, created_at) VALUES (?, ?, 'manager', datetime('now'))",
            (tg_id, name))
    await message.answer(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω:\nüë§ {name}\nüÜî {tg_id}")

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –∑–∞–≤–µ—Ä–Ω—ë–º –≤ try
    try:
        await message.bot.send_message(tg_id,
            "–ü—Ä–∏–≤–µ—Ç, üëã!\n–í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º—É ProjectGuard. –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –∑–∞—â–∏—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ ¬´–≤–∞—à–∏¬ª.")
    except Exception:
        pass
    await state.clear()

@router.callback_query(IsAdmin(), F.data == "mgr_del")
async def mgr_del_start(call: CallbackQuery, state: FSMContext):
    await state.set_state(DelMgr.tg_id)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")

@router.message(IsAdmin(), DelMgr.tg_id)
async def mgr_del_finish(message: Message, state: FSMContext):
    tg = message.text.strip()
    execute("DELETE FROM users WHERE telegram_id=?", (tg,))
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {tg} —É–¥–∞–ª—ë–Ω.\n–ï–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞—â–∏—Ç—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏.")
    await state.clear()


# ================= –ü–ê–†–¢–ù–Å–†–´ –ü–û –ú–ï–ù–ï–î–ñ–ï–†–£ (—Å–ø–∏—Å–æ–∫ –∏–∑ users) =================
def pick_manager_kb(users):
    rows, buf = [], []
    for i, u in enumerate(users, 1):
        title = u["full_name"] or (u["telegram_id"] and f"tg:{u['telegram_id']}") or f"id:{u['id']}"
        buf.append(InlineKeyboardButton(text=title, callback_data=f"ad_mgr:{u['id']}"))
        if i % 2 == 0:
            rows.append(buf); buf = []
    if buf:
        rows.append(buf)
    rows.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_admin")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

@router.callback_query(IsAdmin(), F.data == "adm_dealers")
async def adm_dealers(call: CallbackQuery):
    users = fetchall("SELECT id, full_name, telegram_id, role FROM users WHERE role IN ('manager','admin') ORDER BY created_at DESC")
    if not users:
        return await call.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª ¬´–ú–µ–Ω–µ–¥–∂–µ—Ä—ã¬ª.", show_alert=True)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=pick_manager_kb(users))

def dealers_kb(manager_id, names):
    rows, buf = [], []
    for i, name in enumerate(names, 1):
        buf.append(InlineKeyboardButton(text=name, callback_data=f"ad_dl:{manager_id}:{name}"))
        if i % 2 == 0:
            rows.append(buf); buf = []
    if buf:
        rows.append(buf)
    rows.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adm_dealers")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

@router.callback_query(IsAdmin(), F.data.startswith("ad_mgr:"))
async def ad_mgr(call: CallbackQuery):
    mid = int(call.data.split(":")[1])
    names = [r["dealer"] for r in fetchall(
        "SELECT DISTINCT dealer FROM protections WHERE created_by=(SELECT full_name FROM users WHERE id=?) ORDER BY dealer LIMIT 200", (mid,)
    )]
    if not names:
        mgr = fetchone("SELECT full_name FROM users WHERE id=?", (mid,))
        title = (mgr and mgr["full_name"]) or f"id:{mid}"
        return await call.message.edit_text(f"–£ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {title} –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adm_dealers")]
        ]))
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞:", reply_markup=dealers_kb(mid, names))

def protections_kb(rows):
    buttons = []
    for r in rows:
        st = r["status"]
        if st == "success" and r["order_number"]:
            st += f" (‚Ññ{r['order_number']})"
        text = f"#{r['id']} | {r['article']} | {r['quantity']}–º¬≤ | {st}"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"ad_view:{r['id']}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adm_dealers")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(IsAdmin(), F.data.startswith("ad_dl:"))
async def ad_dl(call: CallbackQuery):
    _, mid, dealer = call.data.split(":", 2)
    rows = fetchall(
        """SELECT p.id, p.article, p.quantity, p.status, p.order_number, p.created_at, u.full_name as mgr
           FROM protections p
           LEFT JOIN users u ON u.full_name=p.created_by
           WHERE p.created_by=(SELECT full_name FROM users WHERE id=?) AND p.dealer=?
           ORDER BY datetime(p.created_at) DESC LIMIT 100""",
        (int(mid), dealer),
    )
    if not rows:
        return await call.message.edit_text("–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adm_dealers")]
        ]))
    header = f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {rows[0]['mgr'] or '-'}\nüè¢ –ü–∞—Ä—Ç–Ω—ë—Ä: {dealer}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    await call.message.edit_text(header, reply_markup=protections_kb(rows))

def protection_action_kb(pid, status):
    if status in ("active", "extended", "changed"):
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"adm_extend:{pid}"),
                InlineKeyboardButton(text="‚ùå –°–Ω—è—Ç—å (—Å –ø—Ä–∏—á–∏–Ω–æ–π)", callback_data=f"adm_close:{pid}")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adm_dealers")]
        ])
    else:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adm_dealers")]
        ])

@router.callback_query(IsAdmin(), F.data.startswith("ad_view:"))
async def ad_view(call: CallbackQuery):
    pid = int(call.data.split(":")[1])
    r = fetchone(
        """SELECT p.*, u.full_name as mgr_name, u.telegram_id as mgr_tg
           FROM protections p LEFT JOIN users u ON u.full_name=p.created_by
           WHERE p.id=?""",
        (pid,)
    )
    if not r:
        return await call.answer("–ó–∞—â–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

    st = r["status"]
    if st == "success" and r["order_number"]:
        st += f" (‚Ññ {r['order_number']})"

    card = (
        f"üëç –ó–∞—â–∏—Ç–∞ #{pid}\n\n"
        f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: {r['mgr_name'] or '-'}\n"
        f"üè¢ –ü–∞—Ä—Ç–Ω—ë—Ä: {r['dealer']}\n"
        f"üìç –ì–æ—Ä–æ–¥ –ü–∞—Ä—Ç–Ω—ë—Ä–∞: {r['city']}\n\n"
        f"‚ùóÔ∏è–ê—Ä—Ç–∏–∫—É–ª(—ã): {r['article']}\n"
        f"‚ùóÔ∏è–ú–µ—Ç—Ä–∞–∂ –∑–∞—â–∏—Ç—ã: {r['quantity']} –º¬≤\n\n"
        f"üßç‚Äç‚ôÇÔ∏è –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞/–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {r['client_name']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞: {r['phone_last4']}\n"
        f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {r['object_city']}\n"
        f"üìç –ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞: {r['address']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—â–∏—Ç–µ: {r['comment'] or '‚Äî'}\n\n"
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {r['created_at']}\n"
        f"‚åõÔ∏è –°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {r['expires_at']}\n"
        f"üßæ –°—Ç–∞—Ç—É—Å: {st}\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞ —Å–Ω—è—Ç–∏—è: {r['close_reason'] or '‚Äî'}\n"
        f"#ID: {pid}"
    )
    await call.message.edit_text(card, reply_markup=protection_action_kb(pid, r["status"]))


# ============ –ó–∞–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω–æ–º (—Å –ø—Ä–∏—á–∏–Ω–æ–π) ============
class AdmCloseForm(StatesGroup):
    pid = State()
    reason = State()

@router.callback_query(IsAdmin(), F.data.startswith("adm_close:"))
async def adm_close_start(call: CallbackQuery, state: FSMContext):
    pid = int(call.data.split(":")[1])
    await state.update_data(pid=pid)
    await state.set_state(AdmCloseForm.reason)
    await call.message.answer(f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—â–∏—Ç—ã #{pid}:")

@router.message(IsAdmin(), AdmCloseForm.reason)
async def adm_close_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    pid = data["pid"]
    reason = message.text.strip()
    if not reason:
        return await message.answer("–ü—Ä–∏—á–∏–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞.")
    row = fetchone("SELECT created_by FROM protections WHERE id=?", (pid,))
    execute("UPDATE protections SET status='closed', close_reason=?, updated_at=datetime('now') WHERE id=?", (reason, pid))
    if row:
        mgr = fetchone("SELECT telegram_id FROM users WHERE full_name=?", (row["created_by"],))
        if mgr and mgr["telegram_id"]:
            try:
                await message.bot.send_message(mgr["telegram_id"], f"‚ö†Ô∏è –í–∞—à–∞ –∑–∞—â–∏—Ç–∞ #{pid} –±—ã–ª–∞ —Å–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            except Exception:
                pass
    await message.answer(f"–ó–∞—â–∏—Ç–∞ #{pid} –∑–∞–∫—Ä—ã—Ç–∞.")
    await state.clear()


# ===================== –û–¢–ß–Å–¢–´ / –≠–ö–°–ü–û–†–¢ =====================
def report_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßæ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50", callback_data="rep_all")],
        [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç Excel", callback_data="rep_export")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]
    ])

@router.callback_query(IsAdmin(), F.data == "adm_reports")
async def adm_reports(call: CallbackQuery):
    await call.message.edit_text("üìà –û—Ç—á—ë—Ç –ø–æ –∑–∞—â–∏—Ç–∞–º:", reply_markup=report_menu_kb())

@router.callback_query(IsAdmin(), F.data == "rep_all")
async def rep_all(call: CallbackQuery):
    rows = fetchall(
        """SELECT p.*, u.full_name as mgr_name, u.telegram_id as mgr_tg
           FROM protections p LEFT JOIN users u ON u.full_name=p.created_by
           ORDER BY datetime(p.created_at) DESC LIMIT 50"""
    )
    if not rows:
        return await call.answer("–ó–∞—â–∏—Ç –Ω–µ—Ç.", show_alert=True)
    for r in rows:
        st = r["status"]
        if st == "success" and r["order_number"]:
            st += f" (‚Ññ {r['order_number']})"
        txt = (
            f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: {r['mgr_name'] or '-'}\n"
            f"üè¢ –ü–∞—Ä—Ç–Ω—ë—Ä: {r['dealer']}\n"
            f"üìç –ì–æ—Ä–æ–¥ –ø–∞—Ä—Ç–Ω—ë—Ä–∞: {r['city']}\n\n"
            f"‚ùóÔ∏è–ê—Ä—Ç–∏–∫—É–ª(—ã): {r['article']}\n"
            f"‚ùóÔ∏è–ú–µ—Ç—Ä–∞–∂ –∑–∞—â–∏—Ç—ã: {r['quantity']} –º¬≤\n\n"
            f"üßç‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç: {r['client_name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {r['phone_last4']}\n"
            f"üìç –û–±—ä–µ–∫—Ç: {r['object_city'] or '-'}\n"
            f"üìç –ê–¥—Ä–µ—Å: {r['address'] or '-'}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {r['comment'] or '‚Äî'}\n\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {r['created_at']}\n"
            f"‚åõÔ∏è –ò—Å—Ç–µ–∫–∞–µ—Ç: {r['expires_at']}\n"
            f"üßæ –°—Ç–∞—Ç—É—Å: {st}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞ —Å–Ω—è—Ç–∏—è: {r['close_reason'] or '‚Äî'}\n"
            f"#ID: {r['id']}"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å (–∞–¥–º–∏–Ω)", callback_data=f"adm_extend:{r['id']}"),
            InlineKeyboardButton(text="‚ùå –°–Ω—è—Ç—å (—Å –ø—Ä–∏—á–∏–Ω–æ–π)", callback_data=f"adm_close:{r['id']}")
        ]])
        await call.message.answer(txt, reply_markup=kb)

@router.callback_query(IsAdmin(), F.data == "rep_export")
async def rep_export(call: CallbackQuery):
    await call.message.answer("üì§ –§–æ—Ä–º–∏—Ä—É—é Excel-–æ—Ç—á—ë—Ç‚Ä¶")
    Path("exports").mkdir(exist_ok=True)
    p = "exports/protections.xlsx"
    try:
        export_protections_to_xlsx(p)
        await asyncio.sleep(1)
        file = FSInputFile(p)
        await call.message.answer_document(document=file, caption="üìä –û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –∑–∞—â–∏—Ç–∞–º (.xlsx)")
    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

# ===================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====================
@router.callback_query(IsAdmin(), F.data == "adm_stats")
async def adm_stats(call: CallbackQuery):
    rows = fetchall(
        """SELECT u.full_name as name, u.telegram_id as tg,
                  SUM(1) total,
                  SUM(CASE WHEN p.status IN ('active','extended','changed') THEN 1 ELSE 0 END) active_cnt,
                  SUM(CASE WHEN p.status='success' THEN 1 ELSE 0 END) success_cnt,
                  SUM(CASE WHEN p.status='closed'  THEN 1 ELSE 0 END) closed_cnt,
                  SUM(CASE WHEN p.status='closed' AND COALESCE(p.close_reason,'')<>'' THEN 1 ELSE 0 END) closed_with_reason
           FROM protections p LEFT JOIN users u ON u.full_name=p.created_by
           GROUP BY p.created_by ORDER BY total DESC"""
    )
    if not rows:
        return await call.message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=admin_menu_kb())
    lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:"]
    for r in rows:
        total = r["total"] or 0
        success = r["success_cnt"] or 0
        conv = (success / total * 100) if total else 0
        lines.append(
            f"üßë‚Äçüíº {r['name'] or '-'} (tg:{r['tg']}) ‚Äî –í—Å–µ–≥–æ: {total} | –ê–∫—Ç–∏–≤–Ω—ã—Ö: {r['active_cnt']} | "
            f"–£—Å–ø–µ—à–Ω—ã—Ö: {success} | –°–Ω—è—Ç—ã—Ö: {r['closed_cnt']} | –° –ø—Ä–∏—á–∏–Ω–æ–π: {r['closed_with_reason']} | "
            f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conv:.1f}%"
        )
    await call.message.answer("\n".join(lines), reply_markup=admin_menu_kb())

# ===================== –ê–†–•–ò–í –ò –ü–û–ò–°–ö =====================
@router.callback_query(IsAdmin(), F.data == "adm_archive")
async def adm_archive(call: CallbackQuery):
    rows = fetchall("""SELECT id, dealer, article, quantity, status, created_by
                       FROM protections WHERE status IN ('closed','success')
                       ORDER BY datetime(created_at) DESC LIMIT 150""")
    if not rows:
        return await call.message.edit_text("üì¶ –í –∞—Ä—Ö–∏–≤–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—â–∏—Ç.", reply_markup=admin_menu_kb())
    buttons = [[InlineKeyboardButton(text=f"{r['dealer']} | {r['article']} | {r['quantity']}–º¬≤ | {r['status']}",
                                     callback_data=f"ad_view:{r['id']}")] for r in rows]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_admin")])
    await call.message.edit_text("üì¶ –ê—Ä—Ö–∏–≤ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—â–∏—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(IsAdmin(), F.data == "adm_find_partner")
async def adm_find_partner(call: CallbackQuery):
    dealers = [r["dealer"] for r in fetchall("SELECT DISTINCT dealer FROM protections ORDER BY dealer")]
    if not dealers:
        return await call.answer("–ü–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
    rows, buf = [], []
    for i, d in enumerate(dealers, 1):
        buf.append(InlineKeyboardButton(text=d, callback_data=f"ad_find_d:{d}"))
        if i % 2 == 0:
            rows.append(buf); buf = []
    if buf: rows.append(buf)
    rows.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_admin")])
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))

@router.callback_query(IsAdmin(), F.data.startswith("ad_find_d:"))
async def ad_find_dealer(call: CallbackQuery):
    dealer = call.data.split(":", 1)[1]
    rows = fetchall("""SELECT id, dealer, article, quantity, status
                       FROM protections WHERE dealer=? ORDER BY datetime(created_at) DESC LIMIT 100""", (dealer,))
    if not rows:
        return await call.message.edit_text("‚ùå –ó–∞—â–∏—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adm_find_partner")]]
        ))
    buttons = [[InlineKeyboardButton(text=f"#{r['id']} | {r['article']} | {r['quantity']}–º¬≤ | {r['status']}",
                                     callback_data=f"ad_view:{r['id']}")] for r in rows]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adm_find_partner")])
    await call.message.edit_text(f"üìã –ó–∞—â–∏—Ç—ã –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä—É: {dealer}", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

# ===================== –ù–ê–ó–ê–î =====================
@router.callback_query(IsAdmin(), F.data == "back_admin")
async def back_admin(call: CallbackQuery):
    await call.message.edit_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_kb())
