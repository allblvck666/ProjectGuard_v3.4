from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from utils.db import Database
from datetime import datetime

router = Router()
db = Database()


# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ö–ù–û–ü–ö–ò ======

def protection_actions(pid):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîç –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data=f"open_{pid}")
        ],
        [
            InlineKeyboardButton(text="üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"extend_{pid}"),
            InlineKeyboardButton(text="‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞—â–∏—Ç–∞", callback_data=f"success_{pid}")
        ],
        [
            InlineKeyboardButton(text="‚ùå –°–Ω—è—Ç—å", callback_data=f"remove_{pid}")
        ]
    ])


def back_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])


# ====== –í–´–í–û–î –ê–ö–¢–ò–í–ù–´–• –ò –ê–†–•–ò–í–ù–´–• –ó–ê–©–ò–¢ ======

@router.callback_query(F.data == "my_protections")
async def show_my_protections(call: CallbackQuery):
    user_name = call.from_user.full_name
    protections = db.fetchall(
        "SELECT * FROM protections WHERE manager=? AND status IN ('active','extended','changed') ORDER BY created_at DESC",
        (user_name,)
    )
    if not protections:
        await call.message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—â–∏—Ç.")
        return

    msg = "üìÇ –í–∞—à–∏ –∑–∞—â–∏—Ç—ã:\n\n"
    for p in protections:
        msg += f"üè¢ {p['dealer']} | {p['articles']} | {p['quantity']} –º¬≤ | {p['status']}\n"
    await call.message.answer(msg)


@router.callback_query(F.data == "archive_protections")
async def show_archive(call: CallbackQuery):
    protections = db.fetchall(
        "SELECT * FROM protections WHERE status IN ('closed','success') ORDER BY updated_at DESC"
    )
    if not protections:
        await call.message.answer("üì¶ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.")
        return

    msg = "üì¶ –ê—Ä—Ö–∏–≤ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—â–∏—Ç:\n\n"
    for p in protections:
        msg += f"{p['dealer']} | {p['articles']} | {p['quantity']} –º¬≤ | {p['status']}\n"
    await call.message.answer(msg)


# ====== –í–°–ï –ó–ê–©–ò–¢–´ –ò –ü–†–û–°–ú–û–¢–† –ö–û–õ–õ–ï–ì ======

@router.callback_query(F.data == "all_protections")
async def show_all_protections(call: CallbackQuery):
    protections = db.fetchall("SELECT * FROM protections ORDER BY created_at DESC")
    if not protections:
        await call.message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—â–∏—Ç –≤ –±–∞–∑–µ.")
        return

    msg = "üåç –í—Å–µ –∑–∞—â–∏—Ç—ã (–ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º):\n\n"
    for p in protections:
        msg += f"üë§ {p['manager']} | {p['dealer']} | {p['articles']} | {p['quantity']} –º¬≤ | {p['status']}\n"
    await call.message.answer(msg)


# ====== –ù–ê–ô–¢–ò –ü–û –ü–ê–†–¢–ù–Å–†–£ ======

@router.callback_query(F.data == "search_partner")
async def search_partner_start(call: CallbackQuery):
    managers = db.fetchall("SELECT DISTINCT dealer FROM protections")
    if not managers:
        await call.message.answer("‚ùå –ù–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ —Å –∑–∞—â–∏—Ç–∞–º–∏.")
        return

    kb = []
    row = []
    for i, m in enumerate(managers, 1):
        row.append(InlineKeyboardButton(text=m["dealer"], callback_data=f"partner_{m['dealer']}"))
        if i % 2 == 0:
            kb.append(row)
            row = []
    if row:
        kb.append(row)

    await call.message.answer("üìã –í–∞—à–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã (–Ω–∞–∂–∏–º–∞–π—Ç–µ):", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))


@router.callback_query(F.data.startswith("partner_"))
async def show_partner_protections(call: CallbackQuery):
    dealer = call.data.replace("partner_", "")
    protections = db.fetchall("SELECT * FROM protections WHERE dealer=?", (dealer,))
    if not protections:
        await call.message.answer("‚ùå –ó–∞—â–∏—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    msg = f"üì¶ –ó–∞—â–∏—Ç—ã –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä—É: {dealer}\n\n"
    for p in protections:
        msg += f"{p['dealer']} | {p['articles']} | {p['quantity']} –º¬≤ | {p['status']}\n"
    await call.message.answer(msg)


# ====== –ü–†–û–°–ú–û–¢–† –ü–û–õ–ù–û–ô –ö–ê–†–¢–û–ß–ö–ò ======

@router.callback_query(F.data.startswith("open_"))
async def open_protection(call: CallbackQuery):
    pid = call.data.replace("open_", "")
    p = db.fetchone("SELECT * FROM protections WHERE id=?", (pid,))
    if not p:
        await call.message.answer("‚ùå –ó–∞—â–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    text = (
        f"üëç –ó–∞—â–∏—Ç–∞ #{p['id']}\n\n"
        f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: {p['manager']}\n"
        f"üè¢ –ü–∞—Ä—Ç–Ω—ë—Ä: {p['dealer']}\n"
        f"üìç –ì–æ—Ä–æ–¥ –ü–∞—Ä—Ç–Ω—ë—Ä–∞: {p['dealer_city']}\n\n"
        f"‚ùóÔ∏è–ê—Ä—Ç–∏–∫—É–ª(—ã): {p['articles']}\n"
        f"üì¶ –ú–µ—Ç—Ä–∞–∂ –∑–∞—â–∏—Ç—ã: {p['quantity']} –º¬≤\n\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {p['created_at']}\n"
        f"‚åõ –ò—Å—Ç–µ–∫–∞–µ—Ç: {p['ends']}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {p['status']}\n"
        f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {p['manager']}\n"
    )

    await call.message.answer(text, reply_markup=protection_actions(pid))


# ====== –£–°–ü–ï–®–ù–ê–Ø –ó–ê–©–ò–¢–ê ======

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

class SuccessProtection(StatesGroup):
    waiting_number = State()


@router.callback_query(F.data.startswith("success_"))
async def success_protection(call: CallbackQuery, state: FSMContext):
    pid = call.data.replace("success_", "")
    await state.update_data(pid=pid)
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ 1–° –¥–ª—è –∑–∞—â–∏—Ç—ã #{pid}:")
    await state.set_state(SuccessProtection.waiting_number)


@router.message(SuccessProtection.waiting_number)
async def success_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    pid = data["pid"]
    order_number = message.text.strip()

    db.query(
        "UPDATE protections SET status='success', order_number=?, updated_at=? WHERE id=?",
        (order_number, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), pid)
    )

    await message.answer(f"‚úÖ –ó–∞—â–∏—Ç–∞ #{pid} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É—Å–ø–µ—à–Ω–∞—è (‚Ññ {order_number}).")
    await state.clear()


# ====== –ü–†–û–î–õ–ï–ù–ò–ï –ò –°–ù–Ø–¢–ò–ï ======

@router.callback_query(F.data.startswith("extend_"))
async def extend_protection(call: CallbackQuery):
    pid = call.data.replace("extend_", "")
    protection = db.fetchone("SELECT * FROM protections WHERE id=?", (pid,))
    if not protection:
        await call.message.answer("‚ùå –ó–∞—â–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    new_date = (datetime.strptime(protection["ends"], "%Y-%m-%d") + timedelta(days=5)).strftime("%Y-%m-%d")
    db.query(
        "UPDATE protections SET ends=?, status='extended', updated_at=? WHERE id=?",
        (new_date, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), pid)
    )

    await call.message.answer(f"üîÅ –ó–∞—â–∏—Ç–∞ #{pid} –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {new_date}.")


@router.callback_query(F.data.startswith("remove_"))
async def remove_protection(call: CallbackQuery):
    pid = call.data.replace("remove_", "")
    db.query(
        "UPDATE protections SET status='closed', updated_at=? WHERE id=?",
        (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), pid)
    )
    await call.message.answer(f"‚ùå –ó–∞—â–∏—Ç–∞ #{pid} —Å–Ω—è—Ç–∞ –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.")
